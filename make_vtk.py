#!/usr/bin/env python3
import argparse as ap
import os

import numpy as np

try:
  from pyevtk.hl import gridToVTK
except:
  print("PyEVTK is not installed. Please run pip install pyevtk and try again.")

def main():
  # Setup command line arguements.
  parser = ap.ArgumentParser(description='Plots the scalar flux generated by DOMA for 3D transport problems.')
  parser.add_argument('-i', type=str, dest='file_name', required=True, help='The path of the input file (assuming the outputs are in the same directory).')
  parser.add_argument('-s', type=int, dest='step', required=False, default=-1, help='The timestep to plot. Negative timesteps indicate a steady state solve.')

  cli_args = parser.parse_args()
  dir_path = os.path.dirname(os.path.realpath(cli_args.file_name))
  input_name = os.path.splitext(os.path.basename(cli_args.file_name))[0]

  # Quick check to make sure we have a valid DOMA problem.
  if not os.path.isfile(cli_args.file_name):
    raise Exception('Couldn\'t find a DOMA input file at: ' + cli_args.file_name)

  # Attempt to parse information about the problem dimensionality.
  n_dims = 0
  dim_x  = 0
  dim_y  = 0
  dim_z  = 0
  grps   = 0
  try:
    with open(dir_path + "/" + input_name + "_dims.txt", "r") as dim_file:
      lines = dim_file.readlines()
      n_dims = len(lines) - 1

      if n_dims == 1:
        raise Exception('Can only generate a VTK file with 2D/3D results! Use 1D_plot_results.py instead.')

      dim_x = int(str(lines[0]).replace("num_x: ", "").replace("\n", ""))
      dim_y = int(str(lines[1]).replace("num_y: ", "").replace("\n", ""))
      grps = int(str(lines[n_dims]).replace("num_g: ", "").replace("\n", ""))
      if n_dims > 2:
        dim_z = int(str(lines[2]).replace("num_z: ", "").replace("\n", ""))
  except:
    raise Exception('The DOMA dimension file ' + dir_path + "/" + input_name + "_dims.txt" + ' either does not exist, or is malformed.'
                    ' This indicates that the input deck was not run with DOMA or DOMA failed to solve the problem.')

  # Fetch information about the coordinate system.
  x_vals = np.loadtxt(dir_path + "/" + input_name + "_meshx.txt")
  xmin = np.amin(x_vals)
  xmax = np.amax(x_vals)
  y_vals = np.loadtxt(dir_path + "/" + input_name + "_meshy.txt")
  ymin = np.amin(y_vals)
  ymax = np.amax(y_vals)
  z_vals = np.array([1])
  zmin = 0.0
  zmax = 0.0
  if n_dims > 2:
    z_vals = np.loadtxt(dir_path + "/" + input_name + "_meshz.txt")
    zmin = np.amin(z_vals)
    zmax = np.amax(z_vals)

  x = np.linspace(xmin, xmax, dim_x + 1)
  y = np.linspace(ymin, ymax, dim_y + 1)
  z = np.linspace(zmin, zmax, dim_z + 1)

  # Fetch, reshape, and write the scalar flux data to a VTK file for visualization.
  fluxes_reshaped = {}
  for grp in range(grps):
    raw_flux = np.array([1])
    if cli_args.step >= 0:
      raw_flux = np.loadtxt(dir_path + "/" + input_name + "_t" + str(cli_args.step) + "_g" + str(grp) + "_flux.txt")
    else:
      raw_flux = np.loadtxt(dir_path + "/" + input_name + "_g" + str(grp) + "_flux.txt")

    if n_dims > 2:
      fluxes_reshaped['flux_g_' + str(grp)] = raw_flux.reshape((dim_z, dim_y, dim_x))
    else:
      fluxes_reshaped['flux_g_' + str(grp)] = raw_flux.reshape((1, dim_y, dim_x))

  try:
    gridToVTK('./' + input_name, z, y, x, cellData = fluxes_reshaped)
    print('Results written to ' + input_name + '.vtr')
  except:
    print('Failed to write results to ' + input_name + '.vtr')

if __name__ == "__main__":
    main()
