#!/usr/bin/env python3
import argparse as ap
import os

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

from matplotlib import cm
import matplotlib.colors as colors

def main():
  # Setup command line arguements.
  parser = ap.ArgumentParser(description='Plots the scalar flux generated by DOMA for 3D transport problems.')
  parser.add_argument('-i', type=str, dest='file_name', required=True, help='The path of the input file (assuming the outputs are in the same directory).')
  parser.add_argument('-l', '--log-scale', action='store_true', dest='log_scale', help='Whether the plot is log scale or not.')
  parser.add_argument('-g', type=int, dest='g', required=True, help='The energy group to plot.')
  parser.add_argument('-s', type=int, dest='step', required=False, default=-1, help='The timestep to plot. Negative timesteps indicate a steady state solve.')

  cli_args = parser.parse_args()
  dir_path = os.path.dirname(os.path.realpath(cli_args.file_name))
  input_name = os.path.splitext(os.path.basename(cli_args.file_name))[0]

  dim_file = open(dir_path + "/" + input_name + "_dims.txt", "r")
  dim_x = int(str(dim_file.readline()).replace("num_x: ", "").replace("\n", ""))
  dim_y = int(str(dim_file.readline()).replace("num_y: ", "").replace("\n", ""))
  dim_z = int(str(dim_file.readline()).replace("num_z: ", "").replace("\n", ""))
  grps = int(str(dim_file.readline()).replace("num_g: ", "").replace("\n", ""))

  if cli_args.g < 0 or cli_args.g >= grps:
    raise Exception('g must be bounded by 0 and the total number of groups!')

  x_vals = np.loadtxt(dir_path + "/" + input_name + "_meshx.txt")
  y_vals = np.loadtxt(dir_path + "/" + input_name + "_meshy.txt")
  x_3D = x_vals.reshape((dim_z, dim_y, dim_x))
  y_3D = y_vals.reshape((dim_z, dim_y, dim_x))

  raw_flux = np.zeros([dim_x * dim_y * dim_z])
  if cli_args.step >= 0:
    raw_flux = np.loadtxt(dir_path + "/" + input_name + "_t" + str(cli_args.step) + "_g" + str(cli_args.g) + "_flux.txt")
  else:
    raw_flux = np.loadtxt(dir_path + "/" + input_name + "_g" + str(cli_args.g) + "_flux.txt")

  flux_3D = raw_flux.reshape((dim_z, dim_y, dim_x))
  if cli_args.log_scale == True:
    fig, ax = plt.subplots()
    mappable = ax.pcolor(x_3D[0], y_3D[0], flux_3D[0],
                        norm=colors.LogNorm(vmin = raw_flux.min(), vmax = raw_flux.max()),
                        cmap=cm.coolwarm, shading='auto')
    cbar = fig.colorbar(mappable)
    cbar.ax.set_ylabel('Group ' + str(cli_args.g) + ' Scalar Flux (s$^{-1}$ cm$^{-2}$)')
    ax.set_xlabel('x (cm)')
    ax.set_ylabel('y (cm)')

    fig.subplots_adjust(left = 0.2, bottom = 0.2)
    z_slice_ax = fig.add_axes([0.2, 0.05, 0.6, 0.03])
    z_slice_slider = Slider(z_slice_ax, 'Z Slice', valmin = 0, valmax = dim_z - 1, valinit = 0, valfmt = '%0.0f')
    def update_colourmap_z(val):
      z = int(val)
      mappable.set_array(flux_3D[z])
      mappable.set_norm(colors.LogNorm(vmin = raw_flux.min(), vmax = raw_flux.max()))
    z_slice_slider.on_changed(update_colourmap_z)

    plt.show()
    plt.close()

  else:
    fig, ax = plt.subplots()
    mappable = ax.pcolor(x_3D[0], y_3D[0], flux_3D[0],
                        norm=colors.Normalize(vmin = raw_flux.min(), vmax = raw_flux.max()),
                        cmap=cm.coolwarm, shading='auto')
    cbar = fig.colorbar(mappable)
    cbar.ax.set_ylabel('Group ' + str(cli_args.g) + ' Scalar Flux (s$^{-1}$ cm$^{-2}$)')
    ax.set_xlabel('x (cm)')
    ax.set_ylabel('y (cm)')

    fig.subplots_adjust(left = 0.2, bottom = 0.2)
    z_slice_ax = fig.add_axes([0.2, 0.05, 0.6, 0.03])
    z_slice_slider = Slider(z_slice_ax, 'Z Slice', valmin = 0, valmax = dim_z - 1, valinit = 0, valfmt = '%0.0f')
    def update_colourmap(val):
      mappable.set_array(flux_3D[int(val)])
      mappable.set_norm(colors.Normalize(vmin = raw_flux.min(), vmax = raw_flux.max()))
    z_slice_slider.on_changed(update_colourmap)

    plt.show()
    plt.close()

if __name__ == "__main__":
    main()
